{"version":3,"sources":["Components/Charts/Scatter3d.js","Components/Charts/axis.js","Components/form/selectBox.js","Components/form/checkBox.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","formControl","paddingBottom","Scatter3d","props","classes","className","option","grid3D","xAxis3D","yAxis3D","zAxis3D","series","type","symbolSize","data","myAxis","color","useStyels","text","fontSize","AxisProp","JSON","stringify","axis","minWidth","SelectBox","React","useState","value","setValue","index","open","setOpen","title","FormControl","InputLabel","id","Select","labelId","onClose","event","onOpen","onChange","target","returnAnswer","MenuItem","answers","map","el","i","key","CheckBox","FormGroup","FormControlLabel","control","Checkbox","checked","returnAxisName","label","queryString","require","App","state","questions","main_title","axis_template","gateway","axises","total_axis","position","axises_object","axis_names","all_axis","count_axises","compass_compare","showAnswers","downloadData","urlString","parse","window","location","search","decode","console","log","fetch","then","response","json","setState","uploadData","method","mode","body","headers","success","catch","error","answer","axis_name","getAxisTemplate","axis_index","axis_object","template","Object","entries","item","array","push","filter","undefined","reverse","length","assign","returnAxis","getAxis","index_question","answer_index","state_answers","axises_names","axis_count","axs","indexOf","keys","Set","forEach","difference","lastIndexOf","getAxisSum","sum_array","sum","values","distanceEuclid","distanceIs","minDistance","Infinity","distance","positionInfo","this","questionList","checkbox","onClick","chart","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.d983614f.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactEcharts from \"echarts-for-react\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport 'echarts-gl';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\tformControl: {\r\n\t\tpaddingBottom: 120,\r\n\t},\r\n}));\r\n\r\nexport default function Scatter3d(props) {\r\n\tconst classes = useStyles();\r\n\r\n\tconst getOption = () => ({\r\n\t\t\tgrid3D: {},\r\n\t\t\txAxis3D: {},\r\n\t\t\tyAxis3D: {},\r\n\t\t\tzAxis3D: {},\r\n\t\t\tseries: [\r\n\t\t\t// \t{\r\n\t\t\t// \ttype: 'scatter3D',\r\n\t\t\t// \tsymbolSize: 15,\r\n\t\t\t// \tdata: props.axises.axises,\r\n\t\t\t// \tcolor: 'black'\r\n\t\t\t// },\r\n\t\t\t{\r\n\t\t\t\ttype: 'scatter3D',\r\n\t\t\t\tsymbolSize: 15,\r\n\t\t\t\tdata: [props.myAxis],\r\n\t\t\t\tcolor: 'red'\r\n\t\t\t}],\r\n\t\t})\r\n\t;\r\n\r\n\treturn (\r\n\t\t<div className={classes.formControl}>\r\n\t\t\t<ReactEcharts option={getOption()}/>\r\n\t\t</div>\r\n\t);\r\n}","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Scatter3d from \"./Scatter3d\";\r\n\r\n\r\nconst useStyels = makeStyles((theme) =>({\r\n\ttext:{\r\n\t\tfontSize: '25px',\r\n\t}\r\n}));\r\n\r\nexport default function AxisProp(props){\r\n\tconst classes = useStyels()\r\n\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<p className={classes.text}>{JSON.stringify(props.axis)}</p>\r\n\t\t</div>\r\n\t)\r\n}","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\tformControl: {\r\n\t\tminWidth: 120,\r\n\r\n\t},\r\n}));\r\n\r\nexport default function SelectBox(props) {\r\n\r\n\tconst classes = useStyles();\r\n\tconst [value, setValue] = React.useState('');\r\n\r\n\tconst index = props.index\r\n\tconst [open, setOpen] = React.useState(false);\r\n\r\n\tconst handleChange = (event) => {\r\n\t\tsetValue(event.target.value);\r\n\t\tprops.returnAnswer(event.target.value, index)\r\n\t};\r\n\r\n\tconst handleClose = (event) => {\r\n\t\tsetOpen(false)\r\n\t};\r\n\r\n\tconst handleOpen = (event) => {\r\n\t\tsetOpen(true)\r\n\t}\r\n\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h4>{props.title}</h4>\r\n\t\t\t<FormControl className={classes.formControl}>\r\n\t\t\t\t<InputLabel id=\"controlled-open-select-label\">Выбрать</InputLabel>\r\n\t\t\t\t<Select\r\n\t\t\t\t\tlabelId=\"controlled-open-select-label\"\r\n\t\t\t\t\tid={\"select\" + index}\r\n\t\t\t\t\topen={open}\r\n\t\t\t\t\tonClose={handleClose}\r\n\t\t\t\t\tonOpen={handleOpen}\r\n\t\t\t\t\tvalue={value}\r\n\t\t\t\t\tonChange={handleChange}>\r\n\t\t\t\t\t<MenuItem value={\"\"}><em>None</em></MenuItem>\r\n\t\t\t\t\t{props.answers.map((el, i) => <MenuItem key={i} value={el}>{el}</MenuItem>)}\r\n\t\t\t\t</Select>\r\n\t\t\t</FormControl>\r\n\t\t</div>\r\n\t)\r\n\r\n}\r\n","import React from \"react\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\n\r\nexport default function CheckBox(props) {\r\n\tconst [value, setValue] = React.useState(false)\r\n\tconst index = props.index\r\n\r\n\tconst handleChange =(event) => {\r\n\t\tsetValue(event.target.checked)\r\n\t\tprops.returnAxisName(event.target.checked, index)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<FormGroup>\r\n\t\t<FormControlLabel\r\n        control={<Checkbox checked={value} onChange={handleChange} key={props.key} value={props.title}/>}\r\n        label={props.title}\r\n      />\r\n\t\t</FormGroup>\r\n\t)\r\n}","import React, {Component} from 'react';\r\nimport \"./App.css\"\r\nimport AxisProp from \"./Components/Charts/axis\";\r\nimport SelectBox from \"./Components/form/selectBox\";\r\nimport Scatter3d from \"./Components/Charts/Scatter3d\";\r\nimport CheckBox from \"./Components/form/checkBox\";\r\n\r\n\r\nconst queryString = require('query-string');\r\n\r\n\r\nclass App extends Component {\r\n\tstate = {\r\n\t\tquestions: [],\r\n\t\tmain_title: '',\r\n\t\taxis_template: {},\r\n\t\tgateway: '',\r\n\t\tanswers: {},\r\n\t\taxises: {},\r\n\t\ttotal_axis: [],\r\n\t\tposition: {},\r\n\t\taxis: [],\r\n\t\taxises_object: [],\r\n\t\taxis_names: {},\r\n\t\tall_axis: {},\r\n\t\tcount_axises: [],\r\n\t\tcompass_compare: {},\r\n\t\tshowAnswers: false\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.downloadData()\r\n\t}\r\n\r\n\tdownloadData = () => {\r\n\t\tlet urlString = queryString.parse(window.location.search, {decode: false})\r\n\t\tconsole.log(urlString)\r\n\t\tif (true) {\r\n\t\t\t// if (urlString.url) {\r\n\t\t\t// \tfetch(urlString.url)\r\n\t\t\t// fetch('https://raw.githubusercontent.com/Kabirov7/kloop-forms-test/master/config.json')\r\n\t\t\tfetch('https://raw.githubusercontent.com/Kabirov7/kloop-forms-test/master/config_A.json')\r\n\t\t\t\t.then((response) => {\r\n\t\t\t\t\tconsole.log(\"RESPONSE\", response)\r\n\t\t\t\t\treturn response.json();\r\n\t\t\t\t})\r\n\t\t\t\t.then((data) => {\r\n\t\t\t\t\tconsole.log(\"DATA\", data);\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tquestions: data.questions,\r\n\t\t\t\t\t\taxis_template: data.axis_template,\r\n\t\t\t\t\t\tmain_title: data.main_title,\r\n\t\t\t\t\t\tgateway: data.gateway,\r\n\t\t\t\t\t\tcompass_compare: data.compass_compare,\r\n\t\t\t\t\t\taxis: data.axises,\r\n\t\t\t\t\t\taxises_object: data.axises_object\r\n\t\t\t\t\t})\r\n\t\t\t\t});\r\n\t\t} else {\r\n\t\t\tconsole.log(\"ERROR: no url detected\")\r\n\t\t}\r\n\t}\r\n\r\n\tuploadData = (data) => {\r\n\t\tfetch(this.state.gateway, {\r\n\t\t\tmethod: 'POST',\r\n\t\t\tmode: 'no-cors',\r\n\t\t\tbody: JSON.stringify(data),\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json'\r\n\t\t\t}\r\n\t\t}).then(\r\n\t\t\tresponse => response.json()\r\n\t\t).then(\r\n\t\t\tsuccess => console.log(success)\r\n\t\t).catch(\r\n\t\t\terror => {\r\n\t\t\t\tconsole.log(\"Error\", error)\r\n\t\t\t\tthis.setState({showAnswers: true})\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\treturnAnswer = (answer, index) => {\r\n\t\tlet answers = {...this.state.answers}\r\n\t\tanswers[index] = answer\r\n\t\tthis.setState({answers: answers})\r\n\t}\r\n\r\n\treturnAxisName = (axis_name, index) => {\r\n\t\tlet axises = {...this.state.axis_names}\r\n\t\taxises[index] = axis_name\r\n\t\tthis.setState({axis_names: axises})\r\n\t}\r\n\r\n\tgetAxisTemplate = (state) => {\r\n\r\n\t\tlet axis_names = [];\r\n\t\tlet axis, axis_index, axis_object;\r\n\t\tlet all_axis;\r\n\t\tlet template = Object.entries(state.axis_names).map((item, index, array) => {\r\n\t\t\taxis = item[1]\r\n\t\t\taxis_index = item[0]\r\n\t\t\taxis_object = state.axises_object[axis_index]\r\n\t\t\tif (axis) {\r\n\t\t\t\taxis_names.push(axis_object)\r\n\t\t\t\treturn axis_object\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\ttemplate = template.filter(item => item !== undefined)\r\n\t\ttemplate = template.reverse()\r\n\t\tfor (let i = 0; i < template.length + 1; i++) {\r\n\t\t\tif (i != template.length) {\r\n\t\t\t\tall_axis = Object.assign({}, template[i], template[i + 1], all_axis)\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.setState({all_axis: all_axis})\r\n\t}\r\n\r\n\treturnAxis = (axis) => {\r\n\t\tlet axises = {...this.state.axises}\r\n\t\taxises = axis\r\n\t\tthis.setState({axises: axises})\r\n\t}\r\n\r\n\tgetAxis = (state) => {\r\n\t\tlet state_answers = Object.entries(state.answers);\r\n\t\tlet axises_names = [];\r\n\t\tlet axis_count = []\r\n\t\tlet answer, index_question, question, answer_index, axis;\r\n\t\tlet axs = state_answers.map((item, index, array) => {\r\n\r\n\t\t\tanswer = item[1]\r\n\t\t\tindex_question = item[0]\r\n\t\t\tquestion = state.questions[index_question].title\r\n\t\t\tanswer_index = state.questions[index_question].answer.indexOf(answer)\r\n\t\t\taxis = state.questions[index_question].axis[answer_index]\r\n\r\n\t\t\taxises_names.push(Object.keys(axis)[0])\r\n\t\t\treturn axis;\r\n\t\t})\r\n\t\tlet unique_axis = [...new Set(axises_names)];\r\n\t\tunique_axis.forEach((item, index) => {\r\n\t\t\tlet difference = axises_names.lastIndexOf(item) - axises_names.indexOf(item)\r\n\t\t\taxis_count.push(difference)\r\n\t\t})\r\n\t\tthis.returnAxis(axs);\r\n\t\tthis.getAxisSum(axs, axis_count);\r\n\t};\r\n\r\n\tgetAxisSum = (axs, axis_count) => {\r\n\t\tconst sum = this.state.axis_template\r\n\t\tlet sum_array;\r\n\t\tObject.values(axs).forEach(el => {\r\n\t\t\t// console.log(Object.keys(el))\r\n\t\t\tObject.keys(el).forEach(key => {\r\n\t\t\t\tsum[key] += el[key]\r\n\t\t\t})\r\n\t\t})\r\n\t\tsum_array = Object.values(sum)\r\n\t\tconsole.log(sum_array)\r\n\t\tfor (let i = 0; i < sum_array.length; i++) {\r\n\t\t\tsum_array[i] = sum_array[i] / axis_count[i]\r\n\t\t}\r\n\t\tconsole.log(sum_array)\r\n\r\n\t\tthis.distanceEuclid(sum_array)\r\n\t}\r\n\r\n\tdistanceEuclid = (axises) => {\r\n\t\tlet distanceIs;\r\n\t\tlet minDistance = Infinity;\r\n\t\tlet distance = require('euclidean-distance')\r\n\r\n\t\tlet positionInfo = {\r\n\t\t\tdistance: Infinity,\r\n\t\t\ttitle: Infinity,\r\n\t\t}\r\n\r\n\t\twhile (axises.length < 3) {\r\n\t\t\taxises.push(0)\r\n\t\t}\r\n\r\n\t\tthis.setState({total_axis: axises})\r\n\r\n\r\n\t\tif (axises.length != [0].length) {\r\n\t\t\tthis.state.compass_compare.axises.forEach((item, index, array) => {\r\n\t\t\t\tdistanceIs = distance(axises, item);\r\n\r\n\t\t\t\tif (distanceIs < minDistance) {\r\n\t\t\t\t\tminDistance = distanceIs;\r\n\r\n\t\t\t\t\tpositionInfo = {\r\n\t\t\t\t\t\tdistance: minDistance,\r\n\t\t\t\t\t\ttitle: this.state.compass_compare.position[index],\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tthis.setState({position: positionInfo})\r\n\t\t\t})\r\n\t\t}\r\n\r\n\r\n\t}\r\n\r\n\trender() {\r\n\t\tlet questionList = this.state.questions.map((el, i) => {\r\n\t\t\tif (el.type === 'select') {\r\n\t\t\t\treturn <SelectBox key={i} index={i} title={el.title} answers={el.answer} returnAnswer={this.returnAnswer}/>\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tlet checkbox = this.state.axis.map((el, i) => {\r\n\t\t\treturn <CheckBox key={i} index={i} title={el} returnAxisName={this.returnAxisName}/>\r\n\t\t})\r\n\r\n\t\tlet chart = () => {\r\n\t\t\tif (this.state.axises != {}) {\r\n\t\t\t\treturn <Scatter3d myAxis={this.state.total_axis} axises={this.state.compass_compare}/>\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"App\">\r\n\t\t\t\t<h1 className=\"text-align-center\">{JSON.stringify(this.state.axis_template)}</h1>\r\n\t\t\t\t{this.state.showAnswers ? <p>{JSON.stringify(this.state.answers)}</p> : null}\r\n\t\t\t\t<button onClick={() => this.uploadData({\"a\": \"HELLo\"})}>Send data</button>\r\n\t\t\t\t<button onClick={() => this.getAxis(this.state)}>Show state</button>\r\n\t\t\t\t<button onClick={() => this.getAxisTemplate(this.state)}>axis_names</button>\r\n\t\t\t\t{questionList}\r\n\t\t\t\t<AxisProp axis={this.state.axises}/>\r\n\t\t\t\t{checkbox}\r\n\t\t\t\t{chart()}\r\n\t\t\t\t<h4>{JSON.stringify(this.state.position)}</h4>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}