{"version":3,"sources":["Components/axisAverrage/axisAverrage.js","Components/form/radiobutton.js","Components/form/checkBox.js","Components/Charts/Scatter.js","util/firebase.js","Components/shareBtn/facebookShare.js","Components/auth/Home.js","App.js","serviceWorker.js","index.js"],"names":["AllAxisAverrage","props","React","useState","index","className","parseFloat","axisAverrage","toFixed","axisName","RadioButton","value","setValue","ans","useEffect","title","FormControl","const","RadioGroup","aria-label","name","onChange","event","target","returnAnswer","answers","map","el","i","FormControlLabel","key","control","Radio","label","message","CheckBox","FormGroup","Checkbox","checked","returnAxisName","useStyles","makeStyles","theme","formControl","paddingBottom","Scatter","classes","option","xAxis","yAxis","series","symbolSize","data","axises","type","color","myAxis","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","provider","auth","GoogleAuthProvider","signInWithGoogle","signInWithPopup","FacebookShareBtn","axises_title","FacebookShareButton","url","shareImage","quote","join","FacebookIcon","size","queryString","require","Home","state","questions","main_title","gateway","notAnswered","total_axis","axis_title_values","axis_values","position","axis","axis_title","axises_object","axis_names","all_axis","answer_title_values","answer_values","count_axises","compass_compare","default_axises","all_axis_averrage","batch_axises","showAnswers","questions_on_page","first_questions","downloadData","urlString","parse","window","location","search","decode","console","log","fetch","then","response","json","setState","uploadData","method","mode","body","JSON","stringify","headers","success","catch","error","getNotAnswered","pl","elToIntArr","array","forEach","Number","currentQset","slice","idxsOfAnswered","Object","keys","filter","indexOf","answer","axis_name","getAxisMainTemplate","mainTemplate","length","assign","getAxisTemplate","axis_index","axis_object","template","entries","item","push","undefined","reverse","returnAxis","getAxis","index_question","state_answers","axises_names","axis_count","axs","answer_type","answer_type_index","answer_index","axis_type","axis_type_index","axis_is","sort","Set","difference","lastIndexOf","getAxisAverage","sum","values","distanceEuclid","distanceIs","minDistance","Infinity","distance","positionInfo","axises_object_keys","axises_object_values","axises_idx","item_index","default_axis","axis_idx","idx","saving_data","part","axises_averrage","database","ref","child","this","questionList","type_answers","index_type","checkbox","topFunction","document","scrollTop","documentElement","nextAndScrollTop","whichNotAnswered","previousAndScrollTop","onClick","chart","Component","App","exact","path","component","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gTAGe,SAASA,EAAgBC,GAAQ,IAAD,EACpBC,IAAMC,UAAS,GADK,6BAEhCF,EAAMG,MASpB,OACC,yBAAKC,UAAU,YACd,2BAAG,2BAAIC,WAAWL,EAAMM,cAAcC,QAAQ,KAC9C,2BAAIP,EAAMQ,W,wCCTE,SAASC,EAAYT,GAAQ,IAAD,EAChBC,IAAMC,SAAS,IADC,mBACnCQ,EADmC,KAC5BC,EAD4B,KAEpCR,EAAQH,EAAMG,MACbS,EAAOZ,EAAPY,IAaP,OANAC,qBAAU,WACLD,GACHD,EAASC,KAER,CAACA,QAGH,6BACC,wBAAIR,UAAU,kBAAkBJ,EAAMc,OACtC,kBAACC,EAAA,EAAD,CAAaC,MAAM,YAClB,kBAACC,EAAA,EAAD,CAAYC,aAAYlB,EAAMc,MAAQK,KAAMnB,EAAMc,MAAOJ,MAAOA,EAAOU,SAfrD,SAACC,GACrBV,EAASU,EAAMC,OAAOZ,OACtBV,EAAMuB,aAAaF,EAAMC,OAAOZ,MAAOP,KAcnCH,EAAMwB,QAAQC,KAAI,SAACC,EAAIC,GAAL,OAAW,kBAACC,EAAA,EAAD,CAAkBxB,UAAU,gBAAgByB,IAAKF,EAAGjB,MAAOgB,EAAII,QAAS,kBAACC,EAAA,EAAD,MAAUC,MAAON,QAExH,yBAAKtB,UAAU,+BACd,2BAAIJ,EAAMiC,Y,sBC1BA,SAASC,EAASlC,GAAQ,IAAD,EACbC,IAAMC,UAAS,GADF,mBAChCQ,EADgC,KACzBC,EADyB,KAEjCR,EAAQH,EAAMG,MAOpB,OACE,kBAACgC,EAAA,EAAD,KACC,kBAACP,EAAA,EAAD,CACCE,QAAS,kBAACM,EAAA,EAAD,CAAUhC,UAAU,gBAAgBiC,QAAS3B,EAAOU,SAR5C,SAACC,GACrBV,EAASU,EAAMC,OAAOe,SACtBrC,EAAMsC,eAAejB,EAAMC,OAAOe,QAASlC,IAM6C0B,IAAK7B,EAAM6B,IAC7EnB,MAAOV,EAAMmB,OAChCa,MAAOhC,EAAMc,S,+BCfZyB,G,OAAYC,aAAW,SAACC,GAAD,MAAY,CACxCC,YAAa,CACZC,cAAe,UAIF,SAASC,EAAQ5C,GAC/B,IAAM6C,EAAUN,IAqBhB,OACC,yBAAKnC,UAAWyC,EAAQH,aACvB,kBAAC,IAAD,CAAcI,OArBS,CACvBC,MAAO,GACPC,MAAO,GACPC,OAAQ,CAAC,CACRC,WAAY,GACZC,KAAMnD,EAAMoD,OACZC,KAAM,UACNC,MAAO,SAEP,CACCJ,WAAY,GACZC,KAAM,CAACnD,EAAMuD,QACbF,KAAM,UACNC,MAAO,Y,qBCfZE,IAASC,cAVc,CACtBC,OAAQ,0CACRC,WAAY,gCACZC,YAAa,uCACbC,UAAW,gBACXC,cAAe,4BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAIhB,IAAMC,EAAW,IAAIV,IAASW,KAAKC,mBACtBC,EAAmB,WAC/Bb,IAASW,OAAOG,gBAAgBJ,IAOlBV,IAAf,E,kBCjBe,SAASe,EAAiBvE,GACxC,IAAIiC,EAAUjC,EAAMwE,aAAa/C,KAAI,SAACC,EAAIC,GAAL,OAAUD,EAAG,KAAOrB,WAAWL,EAAMoD,OAAOzB,IAAIpB,QAAQ,MAC7F,OACE,kBAACkE,EAAA,EAAD,CACCC,IAAK,kBACLC,WAAY,+IACZC,MAAQ3C,EAAQ4C,KAAK,OAErB,kBAACC,EAAA,EAAD,CACCC,KAAM,YCCX,IAAMC,EAAcC,EAAQ,KA+abC,E,4MA5adC,MAAQ,CACPC,UAAW,GACXC,WAAY,GACZC,QAAS,GACT9D,QAAS,GACT+D,YAAa,GACbnC,OAAQ,GACRoC,WAAY,GACZC,kBAAmB,GACnBC,YAAa,GACbC,SAAU,GACVC,KAAM,GACNC,WAAY,GACZC,cAAe,GACfC,WAAY,GACZC,SAAU,GACVC,oBAAqB,GACrBC,cAAe,GACfC,aAAc,GACdC,gBAAiB,GACjBC,eAAgB,GAChBC,kBAAmB,GACnBC,aAAc,GACdC,aAAa,EACbC,kBAAmB,EACnBC,gBAAiB,G,EASlBC,aAAe,WACd,IAAIC,EAAY5B,EAAY6B,MAAMC,OAAOC,SAASC,OAAQ,CAACC,QAAQ,IACnEC,QAAQC,IAAIP,GAGXQ,MAAM,uFAKJC,MAAK,SAACC,GAEN,OADAJ,QAAQC,IAAI,WAAYG,GACjBA,EAASC,UAEhBF,MAAK,SAAClE,GACN+D,QAAQC,IAAI,OAAQhE,GACpB,EAAKqE,SAAS,CACbpC,UAAWjC,EAAKiC,UAChBC,WAAYlC,EAAKkC,WACjBC,QAASnC,EAAKmC,QACdc,gBAAiBjD,EAAKiD,gBACtBR,KAAMzC,EAAKC,OACXyC,WAAY1C,EAAK0C,WACjBJ,kBAAmBtC,EAAKsC,kBACxBC,YAAavC,EAAKuC,YAClBO,oBAAqB9C,EAAK8C,oBAC1BC,cAAe/C,EAAK+C,cACpBJ,cAAe3C,EAAK2C,cACpBW,kBAAmBtD,EAAKsD,wB,EAQ7BgB,WAAa,SAACtE,GACbiE,MAAM,EAAKjC,MAAMG,QAAS,CACzBoC,OAAQ,OACRC,KAAM,UACNC,KAAMC,KAAKC,UAAU3E,GACrB4E,QAAS,CACR,eAAgB,sBAEfV,MACF,SAAAC,GAAQ,OAAIA,EAASC,UACpBF,MACD,SAAAW,GAAO,OAAId,QAAQC,IAAIa,MACtBC,OACD,SAAAC,GACChB,QAAQC,IAAI,QAASe,GACrB,EAAKV,SAAS,CAAChB,aAAa,Q,EAK/B2B,eAAiB,SAAChD,EAAOiD,GAExB,SAASC,EAAWC,GAInB,OAHAA,EAAMC,SAAQ,SAAC5G,EAAGxB,GACjBmI,EAAMnI,GAASqI,OAAOF,EAAMnI,OAEtBmI,EAGR,IAAIG,EACM,QAANL,EACHK,EAAc,EAAKtD,MAAMC,UAAUsD,MAAM,EAAKvD,MAAMuB,gBAAiB,EAAKvB,MAAMuB,gBAAkB,EAAKvB,MAAMsB,mBAC7F,SAAN2B,IACVK,EAAc,EAAKtD,MAAMC,UAAUsD,MAAM,EAAKvD,MAAMuB,gBAAiB,EAAKvB,MAAMuB,gBAAkB,EAAKvB,MAAMsB,oBAI9G,IAAIkC,EAAiBN,EAAWO,OAAOC,KAAK1D,EAAM3D,UAKlD,OAJAiH,EAAcJ,EAAWO,OAAOC,KAAKJ,KAEFK,QAAO,SAACnH,GAAD,OAAkE,GAA3DgH,EAAeI,QAAQ,EAAK5D,MAAMuB,gBAAkB/E,O,EAKtGJ,aAAe,SAACyH,EAAQ7I,GACvB,IAAIqB,EAAO,eAAO,EAAK2D,MAAM3D,SAC7BA,EAAQrB,GAAS6I,EACjB,EAAKxB,SAAS,CAAChG,QAASA,K,EAGzBc,eAAiB,SAAC2G,EAAW9I,GAC5B,IAAIiD,EAAM,eAAO,EAAK+B,MAAMY,YAC5B3C,EAAOjD,GAAS8I,EAChB,EAAKzB,SAAS,CAACzB,WAAY3C,K,EAG5B8F,oBAAsB,SAAC/D,GAEtB,IADA,IAAIgE,EACKxH,EAAI,EAAGA,EAAIwD,EAAMW,cAAcsD,OAAS,EAAGzH,IACnDwH,EAAeP,OAAOS,OAAO,GAAIlE,EAAMW,cAAcnE,GAAIwD,EAAMW,cAAcnE,EAAI,GAAIwH,GAEtF,OAAOA,G,EAGRG,gBAAkB,SAACnE,GAClB,IACIS,EAAM2D,EAAYC,EAClBxD,EAFAD,EAAa,GAGb0D,EAAWb,OAAOc,QAAQvE,EAAMY,YAAYtE,KAAI,SAACkI,GAIpD,GAHA/D,EAAO+D,EAAK,GACZJ,EAAaI,EAAK,GAClBH,EAAcrE,EAAMW,cAAcyD,GAC9B3D,EAEH,OADAG,EAAW6D,KAAKJ,GACTA,KAKTC,GADAA,EAAWA,EAASX,QAAO,SAAAa,GAAI,YAAaE,IAATF,MACfG,UACpB,IAAK,IAAInI,EAAI,EAAGA,EAAI8H,EAASL,OAAS,EAAGzH,IACpCA,GAAK8H,EAASL,SACjBpD,EAAW4C,OAAOS,OAAO,GAAII,EAAS9H,GAAI8H,EAAS9H,EAAI,GAAIqE,IAG7D,OAAOA,G,EAIR+D,WAAa,SAACnE,GACb,IAAIxC,EAAM,eAAO,EAAK+B,MAAM/B,QAC5BA,EAASwC,EACT,EAAK4B,SAAS,CAACpE,OAAQA,K,EAGxB4G,QAAU,SAAC7E,GACV,IAII6D,EAAQiB,EAJRC,EAAgBtB,OAAOc,QAAQvE,EAAM3D,SAErC2I,EAAe,GACfC,EAAa,GAGbC,EAAMH,EAAczI,KAAI,SAACkI,EAAMxJ,EAAOmI,GACzC2B,EAAiBN,EAAK,GACtBX,EAASW,EAAK,GACd,IAAIW,EAAcnF,EAAMC,UAAU6E,GAAgBjB,OAC9CuB,EAAoBpF,EAAMc,oBAAoB8C,QAAQuB,GAEtDE,EADerF,EAAMe,cAAcqE,GACPxB,QAAQC,GAEpCyB,EAAYtF,EAAMC,UAAU6E,GAAgBrE,KAC5C8E,EAAkBvF,EAAMM,kBAAkBsD,QAAQ0B,GAElDE,EADaxF,EAAMO,YAAYgF,GACVF,GAMzB,OAJA5B,OAAOC,KAAK8B,GAASpC,SAAQ,SAAC5G,GAC7BwI,EAAaP,KAAKjI,MAGZgJ,KAERR,EAAeA,EAAaS,OACb,YAAO,IAAIC,IAAIV,IAClB5B,SAAQ,SAACoB,EAAMxJ,GAC1B,IAAI2K,EAAcX,EAAaY,YAAYpB,GAAQ,EAAKQ,EAAapB,QAAQY,GAC7ES,EAAWT,GAAQmB,KAGpB,EAAKf,WAAWM,GAChB,EAAKW,eAAeX,EAAKD,I,EAG1BY,eAAiB,SAACX,EAAKD,GACtB,IAAMa,EAAM,EAAK3B,gBAAgB,EAAKnE,OAChCgE,EAAe,EAAKD,oBAAoB,EAAK/D,OAEnDyD,OAAOsC,OAAOb,GAAK9B,SAAQ,SAAA7G,GAC1BkH,OAAOC,KAAKnH,GAAI6G,SAAQ,SAAA1G,GAEvBsH,EAAatH,IAAQH,EAAGG,QACbgI,GAAPoB,QACcpB,IAAboB,EAAIpJ,KACPoJ,EAAIpJ,IAAQH,EAAGG,UAOnB+G,OAAOC,KAAKuB,GAAY7B,SAAQ,SAAA1G,GAC/BsH,EAAatH,GAAOsH,EAAatH,GAAOuI,EAAWvI,WAGzCgI,GAAPoB,GACHrC,OAAOC,KAAKoC,GAAK1C,SAAQ,SAAA1G,QACAgI,IAApBO,EAAWvI,KACdoJ,EAAIpJ,GAAOoJ,EAAIpJ,GAAOuI,EAAWvI,OAKpC,EAAK2F,SAAS,CAAClB,kBAAmBsC,OAAOsC,OAAO/B,GAAcW,iBACnDD,GAAPoB,GACH,EAAKE,eAAeF,I,EAItBE,eAAiB,SAACrF,GAiBjB,IAhBA,IAAIsF,EACAC,EAAcC,IACdlI,EAAS,GACTmI,EAAWtG,EAAQ,KAEnBuG,EAAe,CAClBD,SAAUD,IACVxK,MAAOwK,KAGJG,EAAqB7C,OAAOC,KAAK/C,GACjC4F,EAAuB9C,OAAOsC,OAAOpF,GACnC6F,EAAa,GAGftF,EAAiB,GACdA,EAAe+C,OAAS,EAAKjE,MAAMiB,gBAAgBhD,OAAOgG,QAChE/C,EAAeuD,KAAK,IAGrB6B,EAAmBlD,SAAQ,SAAC7G,EAAIC,GAC/ByB,EAAOzB,GAAK+J,EAAqB/J,GACjCgK,EAAWhK,GAAK,EAAKwD,MAAMS,KAAKmD,QAAQrH,MAGzC,EAAKyD,MAAMiB,gBAAgBhD,OAAO3B,KAAI,SAACkI,EAAMiC,GAE5C,IADA,IAAIC,EAAe,GACZA,EAAazC,OAASuC,EAAWvC,QACvCyC,EAAajC,KAAK,GAEnB+B,EAAWpD,SAAQ,SAACuD,EAAUC,GAC7BF,EAAaE,GAAOpC,EAAKmC,MAG1BzF,EAAeuF,GAAcC,KAI9B,EAAKrE,SAAS,CAACjB,aAAcF,IAC7B,EAAKmB,SAAS,CAAChC,WAAYpC,IAEvBA,EAAOgG,QAAU,CAAC,GAAGA,QACxB/C,EAAekC,SAAQ,SAACoB,EAAMxJ,EAAOmI,IACpC8C,EAAaG,EAASnI,EAAQuG,IAEb0B,IAGhBG,EAAe,CACdD,SAHDF,EAAcD,EAIbtK,MAAO,EAAKqE,MAAMiB,gBAAgBT,SAASxF,KAG7C,EAAKqH,SAAS,CAAC7B,SAAU6F,Q,EAO5BQ,YAAc,SAAC7G,GACd,IAAI8G,EAAO,CAEVzK,QAAS2D,EAAM3D,QACf0K,gBAAiB/G,EAAMmB,kBACvBlD,OAAQ+B,EAAM/B,QAGCI,EAAS2I,WAAWC,MAAMC,MAAM,WACtBzC,KAAKqC,I,kEArR/BK,KAAK3F,iB,+BAyRI,IAAD,OAIJ4F,EAFOD,KAAKnH,MAAMC,UAAUsD,MAAM4D,KAAKnH,MAAMuB,gBAAiB4F,KAAKnH,MAAMuB,gBAAkB4F,KAAKnH,MAAMsB,mBAElFhF,KAAI,SAACC,EAAIC,GAChC,IAAIM,EACJ,GAAgB,WAAZP,EAAG2B,KAAmB,CAExBpB,GADyC,GAAtC,EAAKkD,MAAMI,YAAYwD,QAAQpH,GACxB,kMAEA,GAEX,IAAI6K,EAAe9K,EAAGsH,OAElByD,EADe,EAAKtH,MAAMc,oBACA8C,QAAQyD,GAClCxD,EAAS,EAAK7D,MAAMe,cAAcuG,GAEtC,OAAO,kBAAChM,EAAD,CAAaG,IAAK,EAAKuE,MAAM3D,QAAQ,EAAK2D,MAAMuB,gBAAkB/E,GACrDE,IAAK,EAAKsD,MAAMuB,gBAAkB/E,EAAGxB,MAAO,EAAKgF,MAAMuB,gBAAkB/E,EAAGb,MAAOY,EAAGZ,MACtFmB,QAASA,EAAST,QAASwH,EAAQzH,aAAc,EAAKA,mBAIxEjB,EAAegM,KAAKnH,MAAMU,WAAWpE,KAAI,SAACC,EAAIC,GACjD,OAAQ,kBAAC5B,EAAD,CAAiB8B,IAAKF,EAAGxB,MAAOwB,EAAGnB,SAAUkB,EAAIpB,aAAc,EAAK6E,MAAMmB,kBAAkB3E,QAKjG+K,EAAWJ,KAAKnH,MAAMS,KAAKnE,KAAI,SAACC,EAAIC,GACvC,OACC,kBAACO,EAAD,CAAUL,IAAKF,EAAGxB,MAAOwB,EAAGR,KAAMO,EAAIZ,MAAO,EAAKqE,MAAMU,WAAWlE,GAAIW,eAAgB,EAAKA,oBAU1FqK,EAAc,WACjBC,SAAShF,KAAKiF,UAAY,EAC1BD,SAASE,gBAAgBD,UAAY,GAGlCE,EAAmB,WACtB,IAAIC,EAAmB,EAAK7E,eAAe,EAAKhD,MAAO,QAExB,GAA3B6H,EAAiB5D,QACpB,EAAKY,QAAQ,EAAK7E,OAClB,EAAKqC,SAAS,CAACd,gBAAiB,EAAKvB,MAAMuB,gBAAkB,EAAKvB,MAAMsB,oBACxE,EAAKe,SAAS,CAACjC,YAAa,KAC5BoH,KAEA,EAAKnF,SAAS,CAACjC,YAAayH,KAK1BC,EAAuB,WAC1B,IAAID,EAAmB,EAAK7E,eAAe,EAAKhD,MAAO,SAExB,GAA3B6H,EAAiB5D,QACpB,EAAKY,QAAQ,EAAK7E,OAClB,EAAKqC,SAAS,CAACd,gBAAiB,EAAKvB,MAAMuB,gBAAkB,EAAKvB,MAAMsB,oBACxE,EAAKe,SAAS,CAACjC,YAAa,KAC5BoH,KAEA,EAAKnF,SAAS,CAACjC,YAAayH,KAiC9B,OACC,yBAAK5M,UAAU,OACd,4BAAQ8M,QAAS,kBAAMhG,QAAQC,IAAI,EAAKhC,SAAxC,cACA,4BAAQ+H,QAAS7I,GAAjB,uBACA,kBAACE,EAAD,CAAkBnB,OAAQkJ,KAAKnH,MAAMmB,kBAAmB9B,aAAc8H,KAAKnH,MAAMU,aAhC9E,EAAKV,MAAMC,UAAUgE,QAAU,EAAKjE,MAAMuB,gBACrC,6BACP,wBAAItG,UAAU,kBAAd,yMACA,yBAAKA,UAAU,iBACbsM,GA3CO,WACX,GAAI,EAAKvH,MAAM/B,QAAU,GACxB,OAAO,kBAACR,EAAD,CAASW,OAAQ,EAAK4B,MAAMK,WAAYpC,OAAQ,EAAK+B,MAAMoB,eA2ChE4G,GACD,yBAAK/M,UAAU,WACbE,GAEF,4BAAQ4M,QAAS,kBAAM,EAAKlD,QAAQ,EAAK7E,SAAzC,cACA,6BACA,4BAAQ+H,QAASD,GAAjB,iBACA,4BAAQC,QAASH,GAAjB,aACA,6BACA,4BAAQG,QAAS,kBAAM,EAAKlB,YAAY,EAAK7G,SAA7C,cAIO,6BACNoH,EACD,4BAAQW,QAASD,GAAjB,iBACA,4BAAQC,QAASH,GAAjB,mB,GAzZcK,aCQJC,E,uKAbb,OACC,6BACE,kBAAC,IAAD,KACC,6BACC,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAM,kBAAmBC,UAAWtI,W,GAPtCkI,aCEEK,QACW,cAA7B3G,OAAOC,SAAS2G,UAEe,UAA7B5G,OAAOC,SAAS2G,UAEhB5G,OAAOC,SAAS2G,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFlB,SAASmB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7G,MAAK,SAAA8G,GACJA,EAAaC,gBAEdnG,OAAM,SAAAC,GACLhB,QAAQgB,MAAMA,EAAMjG,a","file":"static/js/main.582bf7fb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../../App.css\";\r\n\r\nexport default function AllAxisAverrage(props) {\r\n\tconst [value, setValue] = React.useState(false)\r\n\tconst index = props.index\r\n\r\n\tconst handleChange = (event) => {\r\n\t\tsetValue(event.target.checked)\r\n\t\tprops.returnAxisName(event.target.checked, index)\r\n\t}\r\n\r\n\r\n\r\n\treturn (\r\n\t\t<div className=\"axisItem\">\r\n\t\t\t<p><b>{parseFloat(props.axisAverrage).toFixed(2)}</b></p>\r\n\t\t\t<p>{props.axisName}</p>\r\n\t\t</div>\r\n\t)\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport \"../../App.css\"\r\n\r\n\r\nexport default function RadioButton(props) {\r\n\tconst [value, setValue] = React.useState('');\r\n\tconst index = props.index\r\n\tconst {ans} = props\r\n\r\n\tconst handleChange = (event) => {\r\n\t\tsetValue(event.target.value)\r\n\t\tprops.returnAnswer(event.target.value, index)\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tif (ans){\r\n\t\t\tsetValue(ans)\r\n\t\t}\r\n\t}, {ans})\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h4 className=\"question_title\">{props.title}</h4>\r\n\t\t\t<FormControl const='fieldset'>\r\n\t\t\t\t<RadioGroup aria-label={props.title}  name={props.title} value={value} onChange={handleChange}>\r\n\t\t\t\t\t{props.answers.map((el, i) => <FormControlLabel className=\"question_item\" key={i} value={el} control={<Radio/>} label={el}/>)}\r\n\t\t\t\t</RadioGroup>\r\n\t\t\t\t<div className=\"chooseAnswer padding_margin\">\r\n\t\t\t\t\t<p>{props.message}</p>\r\n\t\t\t\t</div>\r\n\t\t\t</FormControl>\r\n\t\t</div>\r\n\t)\r\n\t\t;\r\n}","import React from \"react\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport \"../../App.css\"\r\n\r\nexport default function CheckBox(props) {\r\n\tconst [value, setValue] = React.useState(false)\r\n\tconst index = props.index\r\n\r\n\tconst handleChange = (event) => {\r\n\t\tsetValue(event.target.checked)\r\n\t\tprops.returnAxisName(event.target.checked, index)\r\n\t}\r\n\r\n\treturn (\r\n\t\t\t<FormGroup>\r\n\t\t\t\t<FormControlLabel\r\n\t\t\t\t\tcontrol={<Checkbox className=\"question_item\" checked={value} onChange={handleChange} key={props.key}\r\n\t\t\t\t\t                   value={props.name}/>}\r\n\t\t\t\t\tlabel={props.title}\r\n\t\t\t\t/>\r\n\t\t\t</FormGroup>\r\n\t)\r\n}","import React from 'react';\r\nimport ReactEcharts from \"echarts-for-react\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport 'echarts-gl';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\tformControl: {\r\n\t\tpaddingBottom: 120,\r\n\t},\r\n}));\r\n\r\nexport default function Scatter(props) {\r\n\tconst classes = useStyles();\r\n\r\n\tconst getOption = () => ({\r\n\t\t\txAxis: {},\r\n\t\t\tyAxis: {},\r\n\t\t\tseries: [{\r\n\t\t\t\tsymbolSize: 15,\r\n\t\t\t\tdata: props.axises,\r\n\t\t\t\ttype: 'scatter',\r\n\t\t\t\tcolor: 'black'\r\n\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tsymbolSize: 10,\r\n\t\t\t\t\tdata: [props.myAxis],\r\n\t\t\t\t\ttype: 'scatter',\r\n\t\t\t\t\tcolor: 'red'\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t})\r\n\t;\r\n\r\n\treturn (\r\n\t\t<div className={classes.formControl}>\r\n\t\t\t<ReactEcharts option={getOption()}/>\r\n\t\t</div>\r\n\t);\r\n}","import firebase from 'firebase';\r\n\r\nconst firebaseConfig = {\r\n\tapiKey: \"AIzaSyCxXwvIJFV9BDZFyQZyBs7k9M0GiI1MRuU\",\r\n\tauthDomain: \"testing-a6f79.firebaseapp.com\",\r\n\tdatabaseURL: \"https://testing-a6f79.firebaseio.com\",\r\n\tprojectId: \"testing-a6f79\",\r\n\tstorageBucket: \"testing-a6f79.appspot.com\",\r\n\tmessagingSenderId: \"886214831731\",\r\n\tappId: \"1:886214831731:web:9d4fee09d2061fead04406\",\r\n\tmeasurementId: \"G-DH4LKFT44D\"\r\n}\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\nexport const signInWithGoogle = () => {\r\n\tfirebase.auth().signInWithPopup(provider);\r\n};\r\n\r\nexport const signInAnonymously = () => {\r\n\tfirebase.auth().signInAnonymously()\r\n}\r\n\r\nexport default firebase;","import React from \"react\";\r\nimport {\r\n\tFacebookShareButton,\r\n\tFacebookIcon,\r\n} from \"react-share\";\r\n\r\nexport default function FacebookShareBtn(props) {\r\n\tlet message = props.axises_title.map((el, i)=> el+': ' + parseFloat(props.axises[i]).toFixed(2))\r\n\treturn (\r\n\t\t\t<FacebookShareButton\r\n\t\t\t\turl={'www.youtube.com'}\r\n\t\t\t\tshareImage={'https://upload.wikimedia.org/wikipedia/commons/thumb/b/b6/Image_created_with_a_mobile_phone.png/1200px-Image_created_with_a_mobile_phone.png'}\r\n\t\t\t\tquote={\tmessage.join('\\n')}\r\n\t\t\t>\r\n\t\t\t\t<FacebookIcon\r\n\t\t\t\t\tsize={\"2.5rem\"}\r\n\t\t\t\t/>\r\n\t\t\t</FacebookShareButton>\r\n\t)\r\n}","import React, {Component, useEffect, useState} from \"react\";\r\nimport '../../App.css'\r\nimport AllAxisAverrage from \"../axisAverrage/axisAverrage\";\r\nimport RadioButton from \"../form/radiobutton\";\r\nimport CheckBox from \"../form/checkBox\";\r\nimport Scatter from \"../Charts/Scatter\";\r\nimport firebase from \"../../util/firebase\";\r\nimport FacebookShareBtn from \"../shareBtn/facebookShare\";\r\nimport app, {signInWithGoogle, signInAnonymously} from \"../../util/firebase\";\r\nimport {\r\n\tEmailShareButton,\r\n\tFacebookShareButton,\r\n\tFacebookShareCount\r\n} from \"react-share\";\r\n\r\n\r\nconst queryString = require('query-string')\r\n\r\nclass Home extends Component {\r\n\tstate = {\r\n\t\tquestions: [],\r\n\t\tmain_title: '',\r\n\t\tgateway: '',\r\n\t\tanswers: {},\r\n\t\tnotAnswered: [],\r\n\t\taxises: {},\r\n\t\ttotal_axis: [],\r\n\t\taxis_title_values: [],\r\n\t\taxis_values: [],\r\n\t\tposition: {},\r\n\t\taxis: [],\r\n\t\taxis_title: [],\r\n\t\taxises_object: [],\r\n\t\taxis_names: {},\r\n\t\tall_axis: {},\r\n\t\tanswer_title_values: [],\r\n\t\tanswer_values: [],\r\n\t\tcount_axises: [],\r\n\t\tcompass_compare: {},\r\n\t\tdefault_axises: [],\r\n\t\tall_axis_averrage: [],\r\n\t\tbatch_axises: [],\r\n\t\tshowAnswers: false,\r\n\t\tquestions_on_page: 0,\r\n\t\tfirst_questions: 0,\r\n\r\n\t}\r\n\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.downloadData()\r\n\t}\r\n\r\n\tdownloadData = () => {\r\n\t\tlet urlString = queryString.parse(window.location.search, {decode: false})\r\n\t\tconsole.log(urlString)\r\n\t\tif (true) {\r\n\t\t\t// fetch('https://raw.githubusercontent.com/Kabirov7/kloop-forms-test/master/config.json')\r\n\t\t\tfetch('https://raw.githubusercontent.com/Kabirov7/kloop-forms-test/master/config_plus.json')\r\n\t\t\t// fetch('https://raw.githubusercontent.com/Kabirov7/kloop-forms-test/master/final_config_test.json')\r\n\t\t\t// fetch('https://raw.githubusercontent.com/Kabirov7/kloop-forms-test/master/final_config_test_0.json')\r\n\t\t\t\t// if (urlString.url) {\r\n\t\t\t\t// \tfetch(urlString.url)\r\n\t\t\t\t.then((response) => {\r\n\t\t\t\t\tconsole.log(\"RESPONSE\", response)\r\n\t\t\t\t\treturn response.json();\r\n\t\t\t\t})\r\n\t\t\t\t.then((data) => {\r\n\t\t\t\t\tconsole.log(\"DATA\", data);\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tquestions: data.questions,\r\n\t\t\t\t\t\tmain_title: data.main_title,\r\n\t\t\t\t\t\tgateway: data.gateway,\r\n\t\t\t\t\t\tcompass_compare: data.compass_compare,\r\n\t\t\t\t\t\taxis: data.axises,\r\n\t\t\t\t\t\taxis_title: data.axis_title,\r\n\t\t\t\t\t\taxis_title_values: data.axis_title_values,\r\n\t\t\t\t\t\taxis_values: data.axis_values,\r\n\t\t\t\t\t\tanswer_title_values: data.answer_title_values,\r\n\t\t\t\t\t\tanswer_values: data.answer_values,\r\n\t\t\t\t\t\taxises_object: data.axises_object,\r\n\t\t\t\t\t\tquestions_on_page: data.questions_on_page,\r\n\t\t\t\t\t})\r\n\t\t\t\t});\r\n\t\t} else {\r\n\t\t\tconsole.log(\"ERROR: no url detected\")\r\n\t\t}\r\n\t}\r\n\r\n\tuploadData = (data) => {\r\n\t\tfetch(this.state.gateway, {\r\n\t\t\tmethod: 'POST',\r\n\t\t\tmode: 'no-cors',\r\n\t\t\tbody: JSON.stringify(data),\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json'\r\n\t\t\t}\r\n\t\t}).then(\r\n\t\t\tresponse => response.json()\r\n\t\t).then(\r\n\t\t\tsuccess => console.log(success)\r\n\t\t).catch(\r\n\t\t\terror => {\r\n\t\t\t\tconsole.log(\"Error\", error)\r\n\t\t\t\tthis.setState({showAnswers: true})\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tgetNotAnswered = (state, pl) => {\r\n\r\n\t\tfunction elToIntArr(array) {\r\n\t\t\tarray.forEach((i, index) => {\r\n\t\t\t\tarray[index] = Number(array[index])\r\n\t\t\t})\r\n\t\t\treturn array\r\n\t\t}\r\n\r\n\t\tlet currentQset;\r\n\t\tif (pl == \"plus\") {\r\n\t\t\tcurrentQset = this.state.questions.slice(this.state.first_questions, this.state.first_questions + this.state.questions_on_page);\r\n\t\t} else if (pl == 'minus') {\r\n\t\t\tcurrentQset = this.state.questions.slice(this.state.first_questions, this.state.first_questions - this.state.questions_on_page);\r\n\t\t}\r\n\r\n\r\n\t\tlet idxsOfAnswered = elToIntArr(Object.keys(state.answers))\r\n\t\tcurrentQset = elToIntArr(Object.keys(currentQset))\r\n\r\n\t\tlet whichNotAnswered = currentQset.filter((i) => idxsOfAnswered.indexOf(this.state.first_questions + i) == -1);\r\n\r\n\t\treturn whichNotAnswered\r\n\t}\r\n\r\n\treturnAnswer = (answer, index) => {\r\n\t\tlet answers = {...this.state.answers}\r\n\t\tanswers[index] = answer\r\n\t\tthis.setState({answers: answers})\r\n\t}\r\n\r\n\treturnAxisName = (axis_name, index) => {\r\n\t\tlet axises = {...this.state.axis_names}\r\n\t\taxises[index] = axis_name\r\n\t\tthis.setState({axis_names: axises})\r\n\t}\r\n\r\n\tgetAxisMainTemplate = (state) => {\r\n\t\tlet mainTemplate;\r\n\t\tfor (let i = 0; i < state.axises_object.length + 1; i++) {\r\n\t\t\tmainTemplate = Object.assign({}, state.axises_object[i], state.axises_object[i + 1], mainTemplate)\r\n\t\t}\r\n\t\treturn mainTemplate;\r\n\t}\r\n\r\n\tgetAxisTemplate = (state) => {\r\n\t\tlet axis_names = [];\r\n\t\tlet axis, axis_index, axis_object;\r\n\t\tlet all_axis;\r\n\t\tlet template = Object.entries(state.axis_names).map((item) => {\r\n\t\t\taxis = item[1]\r\n\t\t\taxis_index = item[0]\r\n\t\t\taxis_object = state.axises_object[axis_index]\r\n\t\t\tif (axis) {\r\n\t\t\t\taxis_names.push(axis_object)\r\n\t\t\t\treturn axis_object\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\ttemplate = template.filter(item => item !== undefined)\r\n\t\ttemplate = template.reverse()\r\n\t\tfor (let i = 0; i < template.length + 1; i++) {\r\n\t\t\tif (i != template.length) {\r\n\t\t\t\tall_axis = Object.assign({}, template[i], template[i + 1], all_axis)\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn all_axis;\r\n\t\tthis.setState({all_axis: all_axis})\r\n\t}\r\n\r\n\treturnAxis = (axis) => {\r\n\t\tlet axises = {...this.state.axises}\r\n\t\taxises = axis\r\n\t\tthis.setState({axises: axises})\r\n\t}\r\n\r\n\tgetAxis = (state) => {\r\n\t\tlet state_answers = Object.entries(state.answers);\r\n\r\n\t\tlet axises_names = [];\r\n\t\tlet axis_count = {};\r\n\t\tlet answer, index_question;\r\n\r\n\t\tlet axs = state_answers.map((item, index, array) => {\r\n\t\t\tindex_question = item[0]\r\n\t\t\tanswer = item[1]\r\n\t\t\tlet answer_type = state.questions[index_question].answer;\r\n\t\t\tlet answer_type_index = state.answer_title_values.indexOf(answer_type)\r\n\t\t\tlet answers_item = state.answer_values[answer_type_index]\r\n\t\t\tlet answer_index = answers_item.indexOf(answer)\r\n\r\n\t\t\tlet axis_type = state.questions[index_question].axis;\r\n\t\t\tlet axis_type_index = state.axis_title_values.indexOf(axis_type)\r\n\t\t\tlet axis_array = state.axis_values[axis_type_index]\r\n\t\t\tlet axis_is = axis_array[answer_index]\r\n\r\n\t\t\tObject.keys(axis_is).forEach((i) => {\r\n\t\t\t\taxises_names.push(i)\r\n\t\t\t})\r\n\r\n\t\t\treturn axis_is;\r\n\t\t})\r\n\t\taxises_names = axises_names.sort()\r\n\t\tlet unique_axis = [...new Set(axises_names)];\r\n\t\tunique_axis.forEach((item, index) => {\r\n\t\t\tlet difference = (axises_names.lastIndexOf(item) + 1) - axises_names.indexOf(item)\r\n\t\t\taxis_count[item] = difference\r\n\t\t})\r\n\r\n\t\tthis.returnAxis(axs);\r\n\t\tthis.getAxisAverage(axs, axis_count);\r\n\t};\r\n\r\n\tgetAxisAverage = (axs, axis_count) => {\r\n\t\tconst sum = this.getAxisTemplate(this.state)\r\n\t\tconst mainTemplate = this.getAxisMainTemplate(this.state)\r\n\r\n\t\tObject.values(axs).forEach(el => {\r\n\t\t\tObject.keys(el).forEach(key => {\r\n\r\n\t\t\t\tmainTemplate[key] += el[key]\r\n\t\t\t\tif (sum != undefined) {\r\n\t\t\t\t\tif (sum[key] !== undefined) {\r\n\t\t\t\t\t\tsum[key] += el[key]\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t})\r\n\r\n\r\n\t\tObject.keys(axis_count).forEach(key => {\r\n\t\t\tmainTemplate[key] = mainTemplate[key] / axis_count[key]\r\n\t\t})\r\n\r\n\t\tif (sum != undefined) {\r\n\t\t\tObject.keys(sum).forEach(key => {\r\n\t\t\t\tif (axis_count[key] !== undefined) {\r\n\t\t\t\t\tsum[key] = sum[key] / axis_count[key]\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tthis.setState({all_axis_averrage: Object.values(mainTemplate).reverse()})\r\n\t\tif (sum != undefined) {\r\n\t\t\tthis.distanceEuclid(sum)\r\n\t\t}\r\n\t}\r\n\r\n\tdistanceEuclid = (axises_object) => {\r\n\t\tlet distanceIs;\r\n\t\tlet minDistance = Infinity;\r\n\t\tlet axises = [];\r\n\t\tlet distance = require('euclidean-distance')\r\n\r\n\t\tlet positionInfo = {\r\n\t\t\tdistance: Infinity,\r\n\t\t\ttitle: Infinity,\r\n\t\t}\r\n\r\n\t\tlet axises_object_keys = Object.keys(axises_object);//keys of choosen axises\r\n\t\tlet axises_object_values = Object.values(axises_object);// values of choosen axises\r\n\t\tconst axises_idx = [];\r\n\r\n\r\n\t\tlet default_axises = [];\r\n\t\twhile (default_axises.length < this.state.compass_compare.axises.length) {\r\n\t\t\tdefault_axises.push([])\r\n\t\t}\r\n\r\n\t\taxises_object_keys.forEach((el, i) => {\r\n\t\t\taxises[i] = axises_object_values[i]\r\n\t\t\taxises_idx[i] = this.state.axis.indexOf(el)\r\n\t\t})\r\n\r\n\t\tthis.state.compass_compare.axises.map((item, item_index) => {\r\n\t\t\tlet default_axis = []\r\n\t\t\twhile (default_axis.length < axises_idx.length) {\r\n\t\t\t\tdefault_axis.push(0)\r\n\t\t\t}\r\n\t\t\taxises_idx.forEach((axis_idx, idx) => {\r\n\t\t\t\tdefault_axis[idx] = item[axis_idx]\r\n\t\t\t})\r\n\r\n\t\t\tdefault_axises[item_index] = default_axis\r\n\t\t})\r\n\r\n\r\n\t\tthis.setState({batch_axises: default_axises})\r\n\t\tthis.setState({total_axis: axises})\r\n\r\n\t\tif (axises.length != [0].length) {\r\n\t\t\tdefault_axises.forEach((item, index, array) => {\r\n\t\t\t\tdistanceIs = distance(axises, item);\r\n\r\n\t\t\t\tif (distanceIs < minDistance) {\r\n\t\t\t\t\tminDistance = distanceIs;\r\n\r\n\t\t\t\t\tpositionInfo = {\r\n\t\t\t\t\t\tdistance: minDistance,\r\n\t\t\t\t\t\ttitle: this.state.compass_compare.position[index],\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tthis.setState({position: positionInfo})\r\n\t\t\t})\r\n\t\t}\r\n\r\n\r\n\t}\r\n\r\n\tsaving_data = (state) => {\r\n\t\tlet part = {\r\n\t\t\t// name: currentUser.email,\r\n\t\t\tanswers: state.answers,\r\n\t\t\taxises_averrage: state.all_axis_averrage,\r\n\t\t\taxises: state.axises,\r\n\t\t}\r\n\r\n\t\tconst rootRef = firebase.database().ref().child('parties')\r\n\t\tconst axisesRef = rootRef.push(part)\r\n\t}\r\n\r\n\r\n\trender() {\r\n\r\n\t\tlet qSet = this.state.questions.slice(this.state.first_questions, this.state.first_questions + this.state.questions_on_page)\r\n\r\n\t\tlet questionList = qSet.map((el, i) => {\r\n\t\t\tlet message;\r\n\t\t\tif (el.type === 'select') {\r\n\t\t\t\tif (this.state.notAnswered.indexOf(i) != -1) {\r\n\t\t\t\t\tmessage = 'Вам следуюет ответить на этот вопрос'\r\n\t\t\t\t} else {\r\n\t\t\t\t\tmessage = ''\r\n\t\t\t\t}\r\n\t\t\t\tlet type_answers = el.answer;\r\n\t\t\t\tlet title_values = this.state.answer_title_values;\r\n\t\t\t\tlet index_type = title_values.indexOf(type_answers);\r\n\t\t\t\tlet answer = this.state.answer_values[index_type]\r\n\r\n\t\t\t\treturn <RadioButton ans={this.state.answers[this.state.first_questions + i]}\r\n\t\t\t\t                    key={this.state.first_questions + i} index={this.state.first_questions + i} title={el.title}\r\n\t\t\t\t                    message={message} answers={answer} returnAnswer={this.returnAnswer}/>\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tlet axisAverrage = this.state.axis_title.map((el, i) => {\r\n\t\t\treturn (<AllAxisAverrage key={i} index={i} axisName={el} axisAverrage={this.state.all_axis_averrage[i]}/>\r\n\t\t\t)\r\n\r\n\t\t})\r\n\r\n\t\tlet checkbox = this.state.axis.map((el, i) => {\r\n\t\t\treturn (\r\n\t\t\t\t<CheckBox key={i} index={i} name={el} title={this.state.axis_title[i]} returnAxisName={this.returnAxisName}/>\r\n\t\t\t)\r\n\t\t})\r\n\r\n\t\tlet chart = () => {\r\n\t\t\tif (this.state.axises != {}) {\r\n\t\t\t\treturn <Scatter myAxis={this.state.total_axis} axises={this.state.batch_axises}/>\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet topFunction = () => {\r\n\t\t\tdocument.body.scrollTop = 0;\r\n\t\t\tdocument.documentElement.scrollTop = 0;\r\n\t\t}\r\n\r\n\t\tlet nextAndScrollTop = () => {\r\n\t\t\tlet whichNotAnswered = this.getNotAnswered(this.state, \"plus\");\r\n\r\n\t\t\tif (whichNotAnswered.length == 0) {\r\n\t\t\t\tthis.getAxis(this.state)\r\n\t\t\t\tthis.setState({first_questions: this.state.first_questions + this.state.questions_on_page});\r\n\t\t\t\tthis.setState({notAnswered: []})\r\n\t\t\t\ttopFunction();\r\n\t\t\t} else {\r\n\t\t\t\tthis.setState({notAnswered: whichNotAnswered})\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tlet previousAndScrollTop = () => {\r\n\t\t\tlet whichNotAnswered = this.getNotAnswered(this.state, \"minus\");\r\n\r\n\t\t\tif (whichNotAnswered.length == 0) {\r\n\t\t\t\tthis.getAxis(this.state)\r\n\t\t\t\tthis.setState({first_questions: this.state.first_questions - this.state.questions_on_page});\r\n\t\t\t\tthis.setState({notAnswered: []})\r\n\t\t\t\ttopFunction();\r\n\t\t\t} else {\r\n\t\t\t\tthis.setState({notAnswered: whichNotAnswered})\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst forms = () => {\r\n\t\t\tif (this.state.questions.length <= this.state.first_questions) {\r\n\t\t\t\treturn (<div>\r\n\t\t\t\t\t<h2 className=\"content-center\">Выберите наиболее важные вещи для вас</h2>\r\n\t\t\t\t\t<div className=\"choose_axises\">\r\n\t\t\t\t\t\t{checkbox}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t{chart()}\r\n\t\t\t\t\t<div className=\"allAxis\">\r\n\t\t\t\t\t\t{axisAverrage}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<button onClick={() => this.getAxis(this.state)}>Show state</button>\r\n\t\t\t\t\t<br/>\r\n\t\t\t\t\t<button onClick={previousAndScrollTop}>Previous page</button>\r\n\t\t\t\t\t<button onClick={nextAndScrollTop}>Next page</button>\r\n\t\t\t\t\t<br/>\r\n\t\t\t\t\t<button onClick={() => this.saving_data(this.state)}>Save data</button>\r\n\t\t\t\t</div>) //in if\r\n\r\n\t\t\t} else {\r\n\t\t\t\treturn (<div>\r\n\t\t\t\t\t{questionList}\r\n\t\t\t\t\t<button onClick={previousAndScrollTop}>Previous page</button>\r\n\t\t\t\t\t<button onClick={nextAndScrollTop}>Next page</button>\r\n\t\t\t\t</div>) // in else\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"App\">\r\n\t\t\t\t<button onClick={() => console.log(this.state)}>show state</button>\r\n\t\t\t\t<button onClick={signInWithGoogle}>Sign in with google</button>\r\n\t\t\t\t<FacebookShareBtn axises={this.state.all_axis_averrage} axises_title={this.state.axis_title}/>\r\n\t\t\t\t{/*{this.state.showAnswers ? <p>{JSON.stringify(this.state.answers)}</p> : null}\r\n\t\t\t\t<button onClick={() => this.uploadData({\"a\": \"HELLo\"})}>Send data</button>*/}\r\n\t\t\t\t{forms()}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n\r\nexport default Home;\r\n","import React, {useState, useEffect, Component} from 'react';\r\nimport './App.css';\r\n\r\nimport {\r\n\tBrowserRouter as Router,\r\n\tRoute,\r\n} from \"react-router-dom\";\r\n\r\nimport Home from \"./Components/auth/Home\";\r\n\r\nclass App extends Component {\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t\t<Router>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<Route exact path={\"/questionnaire/\"} component={Home}/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</Router>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}