{"version":3,"sources":["Components/Charts/Scatter3d.js","Components/Charts/axis.js","Components/form/selectBox.js","Components/form/radiobutton.js","Components/form/checkBox.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","formControl","paddingBottom","Scatter3d","props","classes","className","option","grid3D","xAxis3D","yAxis3D","zAxis3D","series","type","symbolSize","data","axises","color","myAxis","useStyels","text","fontSize","AxisProp","JSON","stringify","axis","minWidth","SelectBox","React","useState","value","setValue","index","open","setOpen","title","FormControl","InputLabel","id","Select","labelId","onClose","event","onOpen","onChange","target","returnAnswer","MenuItem","answers","map","el","i","key","RadioButton","const","RadioGroup","aria-label","name","FormControlLabel","control","Radio","label","CheckBox","FormGroup","Checkbox","checked","returnAxisName","queryString","require","App","state","questions","main_title","gateway","total_axis","axis_title_values","axis_values","position","axis_title","axises_object","axis_names","all_axis","answer_title_values","answer_values","count_axises","compass_compare","default_axises","showAnswers","downloadData","urlString","parse","window","location","search","decode","console","log","fetch","then","response","json","setState","uploadData","method","mode","body","headers","success","catch","error","answer","axis_name","getAxisTemplate","axis_index","axis_object","template","Object","entries","item","array","push","filter","undefined","reverse","length","assign","returnAxis","getAxis","index_question","state_answers","axises_names","axis_count","axs","answer_type","answer_type_index","indexOf","answer_index","axis_type","axis_type_index","axis_is","keys","sort","Set","forEach","difference","lastIndexOf","getAxisAverage","sum","values","distanceEuclid","distanceIs","minDistance","Infinity","distance","positionInfo","axises_object_keys","axises_object_values","axises_idx","item_index","default_axis","axis_idx","idx","this","questionList","type_answers","index_type","checkbox","onClick","chart","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.994162b7.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactEcharts from \"echarts-for-react\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport 'echarts-gl';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\tformControl: {\r\n\t\tpaddingBottom: 120,\r\n\t},\r\n}));\r\n\r\nexport default function Scatter3d(props) {\r\n\tconst classes = useStyles();\r\n\r\n\tconst getOption = () => ({\r\n\t\t\tgrid3D: {},\r\n\t\t\txAxis3D: {},\r\n\t\t\tyAxis3D: {},\r\n\t\t\tzAxis3D: {},\r\n\t\t\tseries: [\r\n\t\t\t\t{\r\n\t\t\t\ttype: 'scatter3D',\r\n\t\t\t\tsymbolSize: 15,\r\n\t\t\t\tdata: props.axises.axises,\r\n\t\t\t\tcolor: 'black'\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\ttype: 'scatter3D',\r\n\t\t\t\tsymbolSize: 15,\r\n\t\t\t\tdata: [props.myAxis],\r\n\t\t\t\tcolor: 'red'\r\n\t\t\t}],\r\n\t\t})\r\n\t;\r\n\r\n\treturn (\r\n\t\t<div className={classes.formControl}>\r\n\t\t\t<ReactEcharts option={getOption()}/>\r\n\t\t</div>\r\n\t);\r\n}","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Scatter3d from \"./Scatter3d\";\r\n\r\n\r\nconst useStyels = makeStyles((theme) =>({\r\n\ttext:{\r\n\t\tfontSize: '25px',\r\n\t}\r\n}));\r\n\r\nexport default function AxisProp(props){\r\n\tconst classes = useStyels()\r\n\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<p className={classes.text}>{JSON.stringify(props.axis)}</p>\r\n\t\t</div>\r\n\t)\r\n}","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\tformControl: {\r\n\t\tminWidth: 120,\r\n\r\n\t},\r\n}));\r\n\r\nexport default function SelectBox(props) {\r\n\r\n\tconst classes = useStyles();\r\n\tconst [value, setValue] = React.useState('');\r\n\r\n\tconst index = props.index\r\n\tconst [open, setOpen] = React.useState(false);\r\n\r\n\tconst handleChange = (event) => {\r\n\t\tsetValue(event.target.value);\r\n\t\tprops.returnAnswer(event.target.value, index)\r\n\t};\r\n\r\n\tconst handleClose = (event) => {\r\n\t\tsetOpen(false)\r\n\t};\r\n\r\n\tconst handleOpen = (event) => {\r\n\t\tsetOpen(true)\r\n\t}\r\n\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h4>{props.title}</h4>\r\n\t\t\t<FormControl className={classes.formControl}>\r\n\t\t\t\t<InputLabel id=\"controlled-open-select-label\">Выбрать</InputLabel>\r\n\t\t\t\t<Select\r\n\t\t\t\t\tlabelId=\"controlled-open-select-label\"\r\n\t\t\t\t\tid={\"select\" + index}\r\n\t\t\t\t\topen={open}\r\n\t\t\t\t\tonClose={handleClose}\r\n\t\t\t\t\tonOpen={handleOpen}\r\n\t\t\t\t\tvalue={value}\r\n\t\t\t\t\tonChange={handleChange}>\r\n\t\t\t\t\t<MenuItem value={\"\"}><em>None</em></MenuItem>\r\n\t\t\t\t\t{props.answers.map((el, i) => <MenuItem key={i} value={el}>{el}</MenuItem>)}\r\n\t\t\t\t</Select>\r\n\t\t\t</FormControl>\r\n\t\t</div>\r\n\t)\r\n\r\n}\r\n","import React from 'react';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\n\r\nexport default function RadioButton(props) {\r\n\tconst [value, setValue] = React.useState('');\r\n\tconst index = props.index\r\n\r\n\tconst handleChange = (event) => {\r\n\t\tsetValue(event.target.value)\r\n\t\tprops.returnAnswer(event.target.value, index)\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h4>{props.title}</h4>\r\n\t\t\t<FormControl const='fieldset'>\r\n\t\t\t\t<RadioGroup aria-label={props.title} name={props.title} value={value} onChange={handleChange}>\r\n\t\t\t\t\t{props.answers.map((el, i) => <FormControlLabel key={i} value={el} control={<Radio/>} label={el}/>)}\r\n\t\t\t\t</RadioGroup>\r\n\t\t\t</FormControl>\r\n\t\t</div>\r\n\t)\r\n\t\t;\r\n}","import React from \"react\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\n\r\nexport default function CheckBox(props) {\r\n\tconst [value, setValue] = React.useState(false)\r\n\tconst index = props.index\r\n\r\n\tconst handleChange =(event) => {\r\n\t\tsetValue(event.target.checked)\r\n\t\tprops.returnAxisName(event.target.checked, index)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<FormGroup>\r\n\t\t<FormControlLabel\r\n        control={<Checkbox checked={value} onChange={handleChange} key={props.key} value={props.name}/>}\r\n        label={props.title}\r\n      />\r\n\t\t</FormGroup>\r\n\t)\r\n}","import React, {Component} from 'react';\r\nimport \"./App.css\"\r\nimport AxisProp from \"./Components/Charts/axis\";\r\nimport SelectBox from \"./Components/form/selectBox\";\r\nimport Scatter3d from \"./Components/Charts/Scatter3d\";\r\nimport RadioButton from \"./Components/form/radiobutton\";\r\nimport CheckBox from \"./Components/form/checkBox\";\r\nimport {push} from \"echarts/src/component/dataZoom/history\";\r\n\r\n\r\nconst queryString = require('query-string');\r\n\r\n\r\nclass App extends Component {\r\n\tstate = {\r\n\t\tquestions: [],\r\n\t\tmain_title: '',\r\n\t\tgateway: '',\r\n\t\tanswers: {},\r\n\t\taxises: {},\r\n\t\ttotal_axis: [],\r\n\t\taxis_title_values: [],\r\n\t\taxis_values: [],\r\n\t\tposition: {},\r\n\t\taxis: [],\r\n\t\taxis_title: [],\r\n\t\taxises_object: [],\r\n\t\taxis_names: {},\r\n\t\tall_axis: {},\r\n\t\tanswer_title_values: [],\r\n\t\tanswer_values: [],\r\n\t\tcount_axises: [],\r\n\t\tcompass_compare: {},\r\n\t\tdefault_axises: [],\r\n\t\tshowAnswers: false\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.downloadData()\r\n\t}\r\n\r\n\tdownloadData = () => {\r\n\t\tlet urlString = queryString.parse(window.location.search, {decode: false})\r\n\t\tconsole.log(urlString)\r\n\t\tif (true) {\r\n\t\t\tfetch('https://raw.githubusercontent.com/Kabirov7/kloop-forms-test/master/config.json')\r\n\t\t\t\t// if (urlString.url) {\r\n\t\t\t\t// \tfetch(urlString.url)\r\n\t\t\t\t.then((response) => {\r\n\t\t\t\t\tconsole.log(\"RESPONSE\", response)\r\n\t\t\t\t\treturn response.json();\r\n\t\t\t\t})\r\n\t\t\t\t.then((data) => {\r\n\t\t\t\t\tconsole.log(\"DATA\", data);\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tquestions: data.questions,\r\n\t\t\t\t\t\tmain_title: data.main_title,\r\n\t\t\t\t\t\tgateway: data.gateway,\r\n\t\t\t\t\t\tcompass_compare: data.compass_compare,\r\n\t\t\t\t\t\taxis: data.axises,\r\n\t\t\t\t\t\taxis_title: data.axis_title,\r\n\t\t\t\t\t\taxis_title_values: data.axis_title_values,\r\n\t\t\t\t\t\taxis_values: data.axis_values,\r\n\t\t\t\t\t\tanswer_title_values: data.answer_title_values,\r\n\t\t\t\t\t\tanswer_values: data.answer_values,\r\n\t\t\t\t\t\taxises_object: data.axises_object,\r\n\t\t\t\t\t})\r\n\t\t\t\t});\r\n\t\t} else {\r\n\t\t\tconsole.log(\"ERROR: no url detected\")\r\n\t\t}\r\n\t}\r\n\r\n\tuploadData = (data) => {\r\n\t\tfetch(this.state.gateway, {\r\n\t\t\tmethod: 'POST',\r\n\t\t\tmode: 'no-cors',\r\n\t\t\tbody: JSON.stringify(data),\r\n\t\t\theaders: {\r\n\t\t\t\t'Content-Type': 'application/json'\r\n\t\t\t}\r\n\t\t}).then(\r\n\t\t\tresponse => response.json()\r\n\t\t).then(\r\n\t\t\tsuccess => console.log(success)\r\n\t\t).catch(\r\n\t\t\terror => {\r\n\t\t\t\tconsole.log(\"Error\", error)\r\n\t\t\t\tthis.setState({showAnswers: true})\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\treturnAnswer = (answer, index) => {\r\n\t\tlet answers = {...this.state.answers}\r\n\t\tanswers[index] = answer\r\n\t\tthis.setState({answers: answers})\r\n\t}\r\n\r\n\treturnAxisName = (axis_name, index) => {\r\n\t\tlet axises = {...this.state.axis_names}\r\n\t\taxises[index] = axis_name\r\n\t\tthis.setState({axis_names: axises})\r\n\t}\r\n\r\n\tgetAxisTemplate = (state) => {\r\n\t\tlet axis_names = [];\r\n\t\tlet axis, axis_index, axis_object;\r\n\t\tlet all_axis;\r\n\t\tlet template = Object.entries(state.axis_names).map((item, index, array) => {\r\n\t\t\taxis = item[1]\r\n\t\t\taxis_index = item[0]\r\n\t\t\taxis_object = state.axises_object[axis_index]\r\n\t\t\tif (axis) {\r\n\t\t\t\taxis_names.push(axis_object)\r\n\t\t\t\treturn axis_object\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\ttemplate = template.filter(item => item !== undefined)\r\n\t\ttemplate = template.reverse()\r\n\t\tfor (let i = 0; i < template.length + 1; i++) {\r\n\t\t\tif (i != template.length) {\r\n\t\t\t\tall_axis = Object.assign({}, template[i], template[i + 1], all_axis)\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn all_axis\r\n\t\tthis.setState({all_axis: all_axis})\r\n\t}\r\n\r\n\treturnAxis = (axis) => {\r\n\t\tlet axises = {...this.state.axises}\r\n\t\taxises = axis\r\n\t\tthis.setState({axises: axises})\r\n\t}\r\n\r\n\tgetAxis = (state) => {\r\n\t\tlet state_answers = Object.entries(state.answers);\r\n\r\n\t\tlet axises_names = [];\r\n\t\tlet axis_count = {};\r\n\t\tlet answer, index_question;\r\n\t\tlet axs = state_answers.map((item, index, array) => {\r\n\r\n\t\t\tanswer = item[1]\r\n\t\t\tindex_question = item[0]\r\n\t\t\tlet answer_type = state.questions[index_question].answer;\r\n\t\t\tlet answer_type_index = state.answer_title_values.indexOf(answer_type)\r\n\t\t\tlet answers_item = state.answer_values[answer_type_index]\r\n\t\t\tlet answer_index = answers_item.indexOf(answer)\r\n\r\n\t\t\tlet axis_type = state.questions[index_question].axis;\r\n\t\t\tlet axis_type_index = state.axis_title_values.indexOf(axis_type)\r\n\t\t\tlet axis_array = state.axis_values[axis_type_index]\r\n\t\t\tlet axis_is = axis_array[answer_index]\r\n\r\n\t\t\taxises_names.push(Object.keys(axis_is)[0])\r\n\r\n\t\t\treturn axis_is;\r\n\t\t})\r\n\t\taxises_names = axises_names.sort()\r\n\r\n\t\tlet unique_axis = [...new Set(axises_names)];\r\n\t\tunique_axis.forEach((item, index) => {\r\n\t\t\tlet difference = (axises_names.lastIndexOf(item) + 1) - axises_names.indexOf(item)\r\n\r\n\t\t\taxis_count[item] = difference\r\n\t\t})\r\n\t\tthis.returnAxis(axs);\r\n\t\tthis.getAxisAverage(axs, axis_count);\r\n\t};\r\n\r\n\tgetAxisAverage = (axs, axis_count) => {\r\n\t\tconst sum = this.getAxisTemplate(this.state)\r\n\t\tlet sum_array;\r\n\r\n\t\tObject.values(axs).forEach(el => {\r\n\t\t\tObject.keys(el).forEach(key => {\r\n\t\t\t\tif (sum[key] !== undefined) {\r\n\t\t\t\t\tsum[key] += el[key]\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t})\r\n\r\n\t\tObject.keys(sum).forEach(key => {\r\n\t\t\tif (axis_count[key] !== undefined) {\r\n\t\t\t\tsum[key] = sum[key] / axis_count[key]\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tsum_array = Object.values(sum)\r\n\t\tthis.distanceEuclid(sum)\r\n\t}\r\n\r\n\tdistanceEuclid = (axises_object) => {\r\n\t\tlet distanceIs;\r\n\t\tlet minDistance = Infinity;\r\n\t\tlet axises = [];\r\n\t\tlet distance = require('euclidean-distance')\r\n\r\n\t\tlet positionInfo = {\r\n\t\t\tdistance: Infinity,\r\n\t\t\ttitle: Infinity,\r\n\t\t}\r\n\r\n\t\tlet axises_object_keys = Object.keys(axises_object);//keys of choosen axises\r\n\t\tlet axises_object_values = Object.values(axises_object);// values of choosen axises\r\n\t\tconst axises_idx = [];\r\n\t\t;\r\n\r\n\t\tlet default_axises = [];\r\n\t\twhile (default_axises.length < this.state.compass_compare.axises.length) {\r\n\t\t\tdefault_axises.push([])\r\n\t\t}\r\n\r\n\t\taxises_object_keys.forEach((el, i) => {\r\n\t\t\taxises[i] = axises_object_values[i]\r\n\t\t\taxises_idx[i] = this.state.axis.indexOf(el)\r\n\t\t})\r\n\r\n\t\tthis.state.compass_compare.axises.map((item, item_index) => {\r\n\t\t\tlet default_axis = []\r\n\t\t\twhile (default_axis.length < axises_idx.length) {\r\n\t\t\t\tdefault_axis.push(0)\r\n\t\t\t}\r\n\t\t\taxises_idx.forEach((axis_idx, idx) => {\r\n\t\t\t\tdefault_axis[idx] = item[axis_idx]\r\n\t\t\t})\r\n\r\n\t\t\tdefault_axises[item_index] = default_axis\r\n\t\t})\r\n\r\n\t\tthis.setState({total_axis: axises})\r\n\r\n\r\n\t\tif (axises.length != [0].length) {\r\n\t\t\tdefault_axises.forEach((item, index, array) => {\r\n\t\t\t\tdistanceIs = distance(axises, item);\r\n\r\n\t\t\t\tif (distanceIs < minDistance) {\r\n\t\t\t\t\tminDistance = distanceIs;\r\n\r\n\t\t\t\t\tpositionInfo = {\r\n\t\t\t\t\t\tdistance: minDistance,\r\n\t\t\t\t\t\ttitle: this.state.compass_compare.position[index],\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tthis.setState({position: positionInfo})\r\n\t\t\t})\r\n\t\t}\r\n\r\n\r\n\t}\r\n\r\n\trender() {\r\n\t\tlet questionList = this.state.questions.map((el, i) => {\r\n\t\t\tif (el.type === 'selecadt') {\r\n\t\t\t\tlet type_answers = el.answer;\r\n\t\t\t\tlet title_values = this.state.answer_title_values;\r\n\t\t\t\tlet index_type = title_values.indexOf(type_answers);\r\n\t\t\t\tlet answer = this.state.answer_values[index_type]\r\n\r\n\t\t\t\treturn <SelectBox key={i} index={i} title={el.title} answers={answer} returnAnswer={this.returnAnswer}/>\r\n\r\n\t\t\t} else if (el.type === 'select') {\r\n\t\t\t\tlet type_answers = el.answer;\r\n\t\t\t\tlet title_values = this.state.answer_title_values;\r\n\t\t\t\tlet index_type = title_values.indexOf(type_answers);\r\n\t\t\t\tlet answer = this.state.answer_values[index_type]\r\n\r\n\t\t\t\treturn <RadioButton key={i} index={i} title={el.title} answers={answer} returnAnswer={this.returnAnswer}/>\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tlet checkbox = this.state.axis.map((el, i) => {\r\n\t\t\treturn <CheckBox key={i} index={i} name={el} title={this.state.axis_title[i]}\r\n\t\t\t                 returnAxisName={this.returnAxisName}/>\r\n\t\t})\r\n\r\n\t\tlet chart = () => {\r\n\t\t\tif (this.state.axises != {}) {\r\n\t\t\t\treturn <Scatter3d myAxis={this.state.total_axis} axises={this.state.compass_compare}/>\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"App\">\r\n\t\t\t\t<h1 className=\"text-align-center\">{JSON.stringify(this.state.total_axis)}</h1>\r\n\t\t\t\t{this.state.showAnswers ? <p>{JSON.stringify(this.state.answers)}</p> : null}\r\n\t\t\t\t<button onClick={() => this.uploadData({\"a\": \"HELLo\"})}>Send data</button>\r\n\t\t\t\t<button onClick={() => this.getAxis(this.state)}>Show state</button>\r\n\t\t\t\t{checkbox}\r\n\t\t\t\t{questionList}\r\n\t\t\t\t<AxisProp axis={this.state.axises}/>\r\n\t\t\t\t{chart()}\r\n\t\t\t\t<button onClick={() => this.getAxis(this.state)}>Show state</button>\r\n\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}